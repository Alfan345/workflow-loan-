name: Simple MLflow Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode'
        required: false
        default: 'basic'
        type: choice
        options:
        - basic
        - advanced

jobs:
  basic-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install basic dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas scikit-learn numpy mlflow matplotlib seaborn joblib
    
    - name: Check files
      run: |
        echo "=== Repository Structure ==="
        ls -la
        
        echo "=== Check if data file exists ==="
        if [ -f "preprocessed_loan_data.csv" ]; then
          echo "✅ Data file found"
          echo "Data shape:"
          python -c "import pandas as pd; df = pd.read_csv('preprocessed_loan_data.csv'); print(f'Rows: {len(df)}, Columns: {len(df.columns)}')"
        else
          echo "❌ Data file not found"
          echo "Available files:"
          find . -name "*.csv" | head -10
        fi
        
        echo "=== Check modelling directory ==="
        if [ -d "modelling" ]; then
          echo "✅ Modelling directory found"
          ls -la modelling/
        else
          echo "❌ Modelling directory not found"
        fi
    
    - name: Create minimal training script
      run: |
        cat > quick_train.py << 'EOF'
        import pandas as pd
        import numpy as np
        from sklearn.model_selection import train_test_split
        from sklearn.ensemble import RandomForestClassifier
        from sklearn.preprocessing import StandardScaler
        from sklearn.metrics import accuracy_score
        import mlflow
        import mlflow.sklearn
        import os

        print("🚀 Starting minimal model training...")

        # Check if data file exists
        if not os.path.exists('preprocessed_loan_data.csv'):
            print("❌ Data file not found!")
            # Create dummy data for testing
            print("📝 Creating dummy data for testing...")
            np.random.seed(42)
            n_samples = 1000
            n_features = 10
            
            # Generate dummy features
            X_dummy = np.random.randn(n_samples, n_features)
            y_dummy = np.random.randint(0, 2, n_samples)
            
            # Create dummy DataFrame
            feature_names = [f'feature_{i}' for i in range(n_features)]
            df_dummy = pd.DataFrame(X_dummy, columns=feature_names)
            df_dummy['loan_status'] = y_dummy
            
            print(f"✅ Created dummy dataset: {df_dummy.shape}")
            X = df_dummy.drop('loan_status', axis=1)
            y = df_dummy['loan_status']
        else:
            print("✅ Loading real data...")
            df = pd.read_csv('preprocessed_loan_data.csv')
            print(f"Data shape: {df.shape}")
            
            X = df.drop('loan_status', axis=1)
            y = df['loan_status']

        # Split data
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42
        )

        print(f"Training set: {X_train.shape}")
        print(f"Test set: {X_test.shape}")

        # Scale features
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        X_test_scaled = scaler.transform(X_test)

        # Setup MLflow
        os.makedirs('mlruns', exist_ok=True)
        mlflow.set_tracking_uri('file:./mlruns')
        mlflow.set_experiment('Quick_Test')

        # Train model
        with mlflow.start_run():
            model = RandomForestClassifier(
                n_estimators=50,  # Small for quick test
                max_depth=5,
                random_state=42
            )
            
            model.fit(X_train_scaled, y_train)
            
            # Test predictions
            y_pred = model.predict(X_test_scaled)
            accuracy = accuracy_score(y_test, y_pred)
            
            # Log to MLflow
            mlflow.log_param("n_estimators", 50)
            mlflow.log_param("max_depth", 5)
            mlflow.log_metric("accuracy", accuracy)
            mlflow.sklearn.log_model(model, "model")
            
            print(f"🎯 Model accuracy: {accuracy:.4f}")
            print("✅ Training completed successfully!")

        print("🏁 Workflow test completed!")
        EOF
    
    - name: Run minimal training
      run: |
        python quick_train.py
    
    - name: Check results
      run: |
        echo "=== Training Results ==="
        if [ -d "mlruns" ]; then
          echo "✅ MLflow tracking created"
          find mlruns -type f | head -5
        else
          echo "❌ No MLflow artifacts"
        fi
    
    - name: Test completion notification
      run: |
        echo "🎉 Simple workflow test completed!"
        echo "✅ Python setup: OK"
        echo "✅ Dependencies: OK" 
        echo "✅ Model training: OK"
        echo "✅ MLflow tracking: OK"
        
        if [ "${{ github.event.inputs.test_mode }}" = "advanced" ]; then
          echo "🔬 Advanced mode enabled"
        else
          echo "🔧 Basic mode completed"
        fi